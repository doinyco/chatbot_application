@page "/"

@using Newtonsoft.Json;
@using System.Text;
@using System.Net.Http;

<PageTitle>Chatbot</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-4">
            <p>@testing</p>
        </div>
        <div class="col-4">
            <div class="messages">
                @for (int i = 0; i < messages.Count; i++)
                {
                    @if (i % 2 == 0)
                    {
                        <div class="question">@messages[i]</div>
                    }
                    else
                    {
                        <div class="response">@messages[i]</div>
                    }
                }
            </div>
            <div class="textMessage">
                <input @bind="message" />
                <button @onclick="SendMessage">Send</button>
            </div>
        </div>
        <div class="col-4">
        </div>
    </div>
</div>

@code{
    public string message;
    public string testing;
    public List<string> messages = new List<string>();
    private static HttpClient Http = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
    }

    public async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            // Do nothing if the message is empty or contains only whitespace
            return;
        }
        Http = new HttpClient();
        messages.Add(message);

        var apiKey = "API-KEY";
        Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");


        // JSON content for the API call
        var jsonContent = new
        {
            prompt = message,
            model = "gpt-3.5",
            max_tokens = 1000
        };

        try
        {
            // Make the API call
            var responseContent = await Http.PostAsync("https://api.openai.com/v1/completions", new StringContent(JsonConvert.SerializeObject(jsonContent), Encoding.UTF8, "application/json"));

            // Check if the response is successful
            if (responseContent.IsSuccessStatusCode)
            {
                // Read the response as a string
                var resContext = await responseContent.Content.ReadAsStringAsync();

                // Deserialize the response into a dynamic object
                var data = JsonConvert.DeserializeObject<dynamic>(resContext);

                // Check if 'data' and 'choices' are not null before accessing 'text'
                if (data != null && data.choices != null && data.choices.Count > 0 && data.choices[0].text != null)
                {
                    messages.Add(data.choices[0].text.ToString());
                }
                else
                {
                    messages.Add("No response text available.");
                }
            }
            else
            {
                messages.Add("API request failed with status code: " + responseContent.StatusCode);
            }
        }
        catch (Exception ex)
        {
            messages.Add("Error: " + ex.Message);
        }
        // Clear the message input field after sending input message
        message = "";
        StateHasChanged();
    }
}
